
services:
  # --- Database & Infrastructure Services ---
  milvus:
    user: root
    image: milvusdb/milvus:latest
    ports:
      - "19530:19530"
      - "9091:9091"
    volumes:
      - milvus_data:/var/lib/milvus/data
      - milvus_logs:/var/lib/milvus/logs
      - milvus_config:/var/lib/milvus/config
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    networks:
      - rosti-net
    depends_on:
      - etcd
      - minio

  etcd:
    image: bitnami/etcd:3.6.1
    ports:
      - "2379:2379"
    environment:
      ALLOW_NONE_AUTHENTICATION: "yes"
      ETCD_ADVERTISE_CLIENT_URLS: http://etcd:2379
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
    networks:
      - rosti-net

  minio:
    image: minio/minio:RELEASE.2025-04-08T15-41-24Z
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: "minioadmin"
      MINIO_ROOT_PASSWORD: "minioadmin"
    command: ["server", "/data", "--console-address", ":9001"]
    networks:
      - rosti-net

  mysql:
    image: mysql:8.0
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: rag_db
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - rosti-net

  redis:
    image: redis:7.0
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rosti-net

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    networks:
      - rosti-net

  # --- Application Services ---
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    deploy:
      resources:
        limits:
          memory: 8G
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./logs/backend:/app/logs
      # --- Alembic Volume Mount ---
      # This volume mount is crucial for development. It maps the local alembic
      # directory to the one inside the container. This ensures that when you run
      # `alembic revision --autogenerate`, the newly created migration script
      # is saved directly to your local filesystem, making it part of your
      # project's version control. Without this, migration scripts would only
      # exist inside the temporary container and be lost when it stops.
      - ./backend/alembic:/app/alembic
      - ./backend/alembic.ini:/app/alembic.ini
      # Model volumes are removed as backend no longer performs local inference.
      - ./verify_milvus.py:/app/verify_milvus.py:ro
      - ./cleanup_milvus.py:/app/cleanup_milvus.py:ro
      - ./cleanup_mongodb.py:/app/cleanup_mongodb.py:ro
      - ./diagnose_rag.py:/app/diagnose_rag.py:ro
      - ./backend/migrate_policies.py:/app/migrate_policies.py:ro
      - ./diagnose_data_inconsistency.py:/app/diagnose_data_inconsistency.py:ro
      # Mount the local models directory for YOLO, etc.
      - ./models:/app/models
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - rosti-net
    depends_on:
      - milvus
      - mysql
      - redis
      - mongodb

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - frontend/.env
    networks:
      - rosti-net
    # No ports are exposed to the host, as the gateway handles traffic.
    # The service is accessible on port 80 within the Docker network.

  docs:
    build:
      context: ./docs
      dockerfile: Dockerfile
    container_name: rosti_docs
    restart: unless-stopped
    networks:
      - rosti-net
    # No ports are exposed to the host, as the gateway handles traffic.

  gateway: # Renamed from 'nginx' for clarity
    image: nginx:stable-alpine
    ports:
      - "80:80"
    volumes:
      - ./Docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - rosti-net
    depends_on:
      - backend
      - frontend
      - docs

  paddleocr:
    # --- ARCHITECTURAL NOTE (2025-07-20) ---
    # The paddleocr service is now based on a pre-built image to improve deployment speed
    # and consistency. The original `build` configuration is commented out below for reference.
    # To build and push the image, you would typically use a command like:
    # docker build -t your-registry/paddleocr-service:latest -f ./Docker/paddleocr/Dockerfile ./Docker/paddleocr
    # docker push your-registry/paddleocr-service:latest
    # image: your-registry/paddleocr-service:latest # <-- IMPORTANT: Replace with your actual image name
    build:
      context: ./Docker/paddleocr
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      # --- Image Preprocessing Settings ---
      # Set to "false" to disable all preprocessing. Defaults to "true".
      - ENABLE_PREPROCESSING=true
      # Gaussian blur kernel size. Must be an odd number. Defaults to 5.
      - PREPROCESS_BLUR_KERNEL=5
      # Adaptive thresholding block size. Must be an odd number > 1. Defaults to 11.
      - PREPROCESS_ADAPTIVE_BLOCK=11
      # Constant subtracted from the mean or weighted mean. Defaults to 2.
      - PREPROCESS_ADAPTIVE_C=2
    volumes:
      # Mount a host directory to the container's model cache directory.
      # This prevents re-downloading the large models every time the container starts.
      - ./models/paddlex-models:/root/.paddlex
    networks:
      - rosti-net
 
  latexocr:
    # --- Base configuration for the LatexOCR service ---
    # Environment-specific details (build, device, restart policy) are in override/prod files.
    ports:
      - "8002:8002"
    volumes:
      # Mount the pre-downloaded model weights to prevent re-downloading on startup.
      # The target path is where the pix2tex library expects to find the weights.
      # The source path points to the actual weight file.
      # The target path is the exact location inside the container where the pix2tex library
      # looks for the weight file, derived from the container's startup logs.
      - ./models/latexocr-model/weights.pth:/opt/conda/lib/python3.10/site-packages/pix2tex/model/checkpoints/weights.pth:ro
    networks:
      - rosti-net
 
  ollama-serving:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - rosti-net
    restart: unless-stopped

# --- Network Definition ---
networks:
  rosti-net:
    driver: bridge

# --- Volumes ---
volumes:
  milvus_data:
  milvus_logs:
  milvus_config:
  minio_data:
  mysql_data:
  redis_data:
  mongodb_data:
  ollama_data:
